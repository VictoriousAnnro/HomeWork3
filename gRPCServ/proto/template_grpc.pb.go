// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetTimeClient is the client API for GetTime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetTimeClient interface {
	// one message is sent and one is recieved
	GetTime(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Ack, error)
}

type getTimeClient struct {
	cc grpc.ClientConnInterface
}

func NewGetTimeClient(cc grpc.ClientConnInterface) GetTimeClient {
	return &getTimeClient{cc}
}

func (c *getTimeClient) GetTime(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/proto.getTime/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetTimeServer is the server API for GetTime service.
// All implementations must embed UnimplementedGetTimeServer
// for forward compatibility
type GetTimeServer interface {
	// one message is sent and one is recieved
	GetTime(context.Context, *Request) (*Ack, error)
	mustEmbedUnimplementedGetTimeServer()
}

// UnimplementedGetTimeServer must be embedded to have forward compatible implementations.
type UnimplementedGetTimeServer struct {
}

func (UnimplementedGetTimeServer) GetTime(context.Context, *Request) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}
func (UnimplementedGetTimeServer) mustEmbedUnimplementedGetTimeServer() {}

// UnsafeGetTimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetTimeServer will
// result in compilation errors.
type UnsafeGetTimeServer interface {
	mustEmbedUnimplementedGetTimeServer()
}

func RegisterGetTimeServer(s grpc.ServiceRegistrar, srv GetTimeServer) {
	s.RegisterService(&GetTime_ServiceDesc, srv)
}

func _GetTime_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTimeServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.getTime/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTimeServer).GetTime(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GetTime_ServiceDesc is the grpc.ServiceDesc for GetTime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetTime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.getTime",
	HandlerType: (*GetTimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTime",
			Handler:    _GetTime_GetTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/template.proto",
}

// SendMessageClient is the client API for SendMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendMessageClient interface {
	// one message is sent and one is recieved
	SendMessage(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error)
}

type sendMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewSendMessageClient(cc grpc.ClientConnInterface) SendMessageClient {
	return &sendMessageClient{cc}
}

func (c *sendMessageClient) SendMessage(ctx context.Context, in *Test, opts ...grpc.CallOption) (*Test, error) {
	out := new(Test)
	err := c.cc.Invoke(ctx, "/proto.sendMessage/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendMessageServer is the server API for SendMessage service.
// All implementations must embed UnimplementedSendMessageServer
// for forward compatibility
type SendMessageServer interface {
	// one message is sent and one is recieved
	SendMessage(context.Context, *Test) (*Test, error)
	mustEmbedUnimplementedSendMessageServer()
}

// UnimplementedSendMessageServer must be embedded to have forward compatible implementations.
type UnimplementedSendMessageServer struct {
}

func (UnimplementedSendMessageServer) SendMessage(context.Context, *Test) (*Test, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedSendMessageServer) mustEmbedUnimplementedSendMessageServer() {}

// UnsafeSendMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendMessageServer will
// result in compilation errors.
type UnsafeSendMessageServer interface {
	mustEmbedUnimplementedSendMessageServer()
}

func RegisterSendMessageServer(s grpc.ServiceRegistrar, srv SendMessageServer) {
	s.RegisterService(&SendMessage_ServiceDesc, srv)
}

func _SendMessage_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendMessageServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.sendMessage/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendMessageServer).SendMessage(ctx, req.(*Test))
	}
	return interceptor(ctx, in, info, handler)
}

// SendMessage_ServiceDesc is the grpc.ServiceDesc for SendMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.sendMessage",
	HandlerType: (*SendMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _SendMessage_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/template.proto",
}
